"""
Django settings for Investa project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-=9tj$u7ncfm(c1m+@lqp8#4=n8=$@-ho)_&4b7-gth7!!^r%ft')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'user',
    'founder',
    'investor',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'ngrok-skip-browser-warning',
]



ROOT_URLCONF = 'Investa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Investa.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'maisonayman12@gmail.com'   # Replace with your Gmail
EMAIL_HOST_PASSWORD = 'wpcz hcoz gutp dtys'  # Use an App Password for security


# Paymob Settings
PAYMOB_API_KEY = "ZXlKaGJHY2lPaUpJVXpVeE1pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmpiR0Z6Y3lJNklrMWxjbU5vWVc1MElpd2ljSEp2Wm1sc1pWOXdheUk2TVRBME9EazVOaXdpYm1GdFpTSTZJbWx1YVhScFlXd2lmUS50S0lWYnJTU1dWcHdESmYwMVY3MktiOUQtbDR6dXBEa2hreFhtbDJFVEJXWXhRbnRwSXhGSGlnQ19KT184ZHR2QWYxVlNYR3VTQjhmTnR6WDd4aDZ5UQ=="
PAYMOB_IFRAME_ID = "926949"
PAYMOB_INTEGRATION_ID = "5110028"


# firebase settings

'''
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Firebase setup
FIREBASE_CREDENTIAL_PATH = '/etc/secrets/firebase_config.json'
if os.path.exists(FIREBASE_CREDENTIAL_PATH):
    cred = credentials.Certificate(FIREBASE_CREDENTIAL_PATH)
    firebase_admin.initialize_app(cred, {
        'databaseURL': os.environ.get("FIREBASE_DB_URL")
    })
else:
    raise Exception("Missing Firebase credential file")

FIREBASE_WEB_API_KEY = os.environ.get("FIREBASE_WEB_API_KEY")
FIREBASE_REALTIME_DB = db.reference()

# Google Drive credentials
GOOGLE_DRIVE_CREDENTIAL_PATH = '/etc/secrets/investakey.json'
if os.path.exists(GOOGLE_DRIVE_CREDENTIAL_PATH):
    GOOGLE_CREDENTIALS = service_account.Credentials.from_service_account_file(
        GOOGLE_DRIVE_CREDENTIAL_PATH,
        scopes=["https://www.googleapis.com/auth/drive"]
    )
else:
    raise Exception("Missing Google Drive key file")


FOLDER_ID_FOR_REELS = '1Datr67ecjoozkP5RcuP_NZHVGuhIgat5'
FOLDER_ID_FOR_PROJECT_PIC = '1wk6wL-KxNPJ9u2XF9NUDRb0pnJ07LE_g'
FOLDER_ID_FOR_PROFILE_PIC = '1fWzuK6MIqsKCVncaLYhV7wB6qfhDWBMd'
FOLDER_ID_FOR_PROJECT_VIDEO = '1KaJjwmqVy91vcW1vGg2HlDoKpvFMheYk'
FOLDER_ID_FOR_FILES = '1gti3xxw3nuT2eQFrhsICNjbiNKAp3_4w'
'''



# firebase settings

import os
import firebase_admin
from firebase_admin import credentials, db
from google.oauth2 import service_account

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Path to Firebase JSON key file
FIREBASE_CREDENTIALS_PATH = os.path.join(BASE_DIR, "firebase_config.json")

# Initialize Firebase Admin SDK (No need for `apiKey`, `authDomain`, etc.)
if not firebase_admin._apps:
    cred = credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
    firebase_admin.initialize_app(cred, {
        'databaseURL': 'https://investa812-default-rtdb.firebaseio.com/'  # Replace with your actual Realtime DB URL
    })

FIREBASE_WEB_API_KEY = "AIzaSyCGC3qzQIuPnR4xTzh2vOqahVNTunQX3QM"

FIREBASE_DB_URL ="https://investa812-default-rtdb.firebaseio.com/"

# Get Firebase Realtime Database Reference
FIREBASE_REALTIME_DB = db.reference()

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Path to your service account key file
GOOGLE_DRIVE_KEY_FILE = os.path.join(BASE_DIR, "investakey.json")

# Load credentials
GOOGLE_CREDENTIALS = service_account.Credentials.from_service_account_file(
    GOOGLE_DRIVE_KEY_FILE,
    scopes=["https://www.googleapis.com/auth/drive"]
)  


FOLDER_ID_FOR_REELS='1Datr67ecjoozkP5RcuP_NZHVGuhIgat5'
FOLDER_ID_FOR_PROJECT_PIC='1wk6wL-KxNPJ9u2XF9NUDRb0pnJ07LE_g'
FOLDER_ID_FOR_PROFILE_PIC='1fWzuK6MIqsKCVncaLYhV7wB6qfhDWBMd'
FOLDER_ID_FOR_PROJECT_VIDEO='1KaJjwmqVy91vcW1vGg2HlDoKpvFMheYk'
FOLDER_ID_FOR_FILES='1gti3xxw3nuT2eQFrhsICNjbiNKAp3_4w'    