
class ReportView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, user_id):
        """
        Get all reports for a specific user
        """
        try:
            reports_ref = db.reference(f'users/{user_id}/reports')
            reports = reports_ref.get()

            if not reports:
                return Response({
                    'data': [],
                    'message': 'No reports found',
                    'status': 'success'
                }, status=status.HTTP_200_OK)

            formatted_reports = []
            for report_id, report_data in reports.items():
                formatted_report = {
                    'id': report_id,
                    'title': report_data.get('title'),
                    'date': report_data.get('date'),
                    'return': report_data.get('return_value'),
                    'type': report_data.get('type'),
                    'status': report_data.get('status'),
                    'details': report_data.get('details')
                }
                formatted_reports.append(formatted_report)

            return Response({
                'data': formatted_reports,
                'message': 'Reports retrieved successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request):
        """
        Create a new report for a user
        """
        try:
            required_fields = ['user_id', 'title', 'date', 'return_value', 'type', 'details']
            missing = [f for f in required_fields if f not in request.data]
            if missing:
                return Response({
                    'error': f'Missing fields: {", ".join(missing)}',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            if request.data['title'] not in ['PORTFOLIO', 'MARKET', 'RISK']:
                return Response({
                    'error': 'Invalid title',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            if request.data['type'] not in ['MONTHLY', 'QUARTERLY']:
                return Response({
                    'error': 'Invalid type',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            report_data = {
                'title': request.data['title'],
                'date': request.data['date'],
                'return_value': request.data['return_value'],
                'type': request.data['type'],
                'status': request.data.get('status', 'ACTIVE'),
                'details': request.data['details'],
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }

            ref = db.reference(f'users/{request.data["user_id"]}/reports')
            new_report = ref.push(report_data)

            return Response({
                'data': {
                    'id': new_report.key,
                    **report_data
                },
                'message': 'Report created successfully',
                'status': 'success'
            }, status=status.HTTP_201_CREATED)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class ReportDetailView(APIView):
    permission_classes = [AllowAny]

    def put(self, request, report_id):
        """
        Update a report for a user
        """
        try:
            user_id = request.data.get('user_id')
            if not user_id:
                return Response({
                    'error': 'User ID is required',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            ref = db.reference(f'users/{user_id}/reports/{report_id}')
            report = ref.get()
            if not report:
                return Response({
                    'error': 'Report not found',
                    'status': 'error'
                }, status=status.HTTP_404_NOT_FOUND)

            updated_data = {
                'title': request.data.get('title', report.get('title')),
                'date': request.data.get('date', report.get('date')),
                'return_value': request.data.get('return_value', report.get('return_value')),
                'type': request.data.get('type', report.get('type')),
                'status': request.data.get('status', report.get('status')),
                'details': request.data.get('details', report.get('details')),
                'updated_at': datetime.now().isoformat()
            }
            ref.update(updated_data)

            return Response({
                'data': {
                    'id': report_id,
                    **updated_data
                },
                'message': 'Report updated successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def delete(self, request, report_id):
        """
        Delete a report for a user
        """
        try:
            user_id = request.query_params.get('user_id')
            if not user_id:
                return Response({
                    'error': 'User ID is required',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            ref = db.reference(f'users/{user_id}/reports/{report_id}')
            report = ref.get()
            if not report:
                return Response({
                    'error': 'Report not found',
                    'status': 'error'
                }, status=status.HTTP_404_NOT_FOUND)

            ref.delete()
            return Response({
                'message': 'Report deleted successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class TransactionReportView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, user_id):
        try:
            ref = db.reference(f'users/{user_id}/transaction_reports')
            reports = ref.get()

            if not reports:
                return Response({
                    'data': [],
                    'message': 'No transaction reports found',
                    'status': 'success'
                }, status=status.HTTP_200_OK)

            formatted_reports = [
                {
                    'id': report_id,
                    'title': data.get('title'),
                    'date': data.get('date'),
                    'amount': data.get('amount'),
                    'type': data.get('type'),
                    'status': data.get('status'),
                    'details': data.get('details')
                }
                for report_id, data in reports.items()
            ]

            return Response({
                'data': formatted_reports,
                'message': 'Transaction reports retrieved successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response({'error': str(e), 'status': 'error'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request):
        try:
            data = request.data
            required_fields = ['user_id', 'title', 'date', 'amount', 'type', 'details']
            missing = [f for f in required_fields if f not in data]

            if missing:
                return Response({'error': f'Missing fields: {", ".join(missing)}', 'status': 'error'},
                                status=status.HTTP_400_BAD_REQUEST)

            if data['title'] not in ['TRANSACTION_HISTORY', 'SETTLEMENT_REPORT', 'TRADING_ACTIVITY']:
                return Response({'error': 'Invalid title', 'status': 'error'},
                                status=status.HTTP_400_BAD_REQUEST)

            if data['type'] not in ['DAILY', 'WEEKLY']:
                return Response({'error': 'Invalid type', 'status': 'error'},
                                status=status.HTTP_400_BAD_REQUEST)

            report_data = {
                'title': data['title'],
                'date': data['date'],
                'amount': data['amount'],
                'type': data['type'],
                'status': data.get('status', 'ACTIVE'),
                'details': data['details'],
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }

            ref = db.reference(f'users/{data["user_id"]}/transaction_reports')
            new_ref = ref.push(report_data)

            return Response({
                'data': {'id': new_ref.key, **report_data},
                'message': 'Transaction report created successfully',
                'status': 'success'
            }, status=status.HTTP_201_CREATED)

        except Exception as e:
            return Response({'error': str(e), 'status': 'error'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class TransactionReportDetailView(APIView):
    permission_classes = [AllowAny]

    def put(self, request, report_id):
        try:
            user_id = request.data.get('user_id')
            if not user_id:
                return Response({'error': 'User ID is required', 'status': 'error'},
                                status=status.HTTP_400_BAD_REQUEST)

            ref = db.reference(f'users/{user_id}/transaction_reports/{report_id}')
            report = ref.get()
            if not report:
                return Response({'error': 'Report not found', 'status': 'error'},
                                status=status.HTTP_404_NOT_FOUND)

            update_data = {
                'title': request.data.get('title', report.get('title')),
                'date': request.data.get('date', report.get('date')),
                'amount': request.data.get('amount', report.get('amount')),
                'type': request.data.get('type', report.get('type')),
                'status': request.data.get('status', report.get('status')),
                'details': request.data.get('details', report.get('details')),
                'updated_at': datetime.now().isoformat()
            }

            ref.update(update_data)

            return Response({
                'data': {'id': report_id, **update_data},
                'message': 'Transaction report updated successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({'error': str(e), 'status': 'error'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def delete(self, request, report_id):
        try:
            user_id = request.query_params.get('user_id')
            if not user_id:
                return Response({'error': 'User ID is required', 'status': 'error'},
                                status=status.HTTP_400_BAD_REQUEST)

            ref = db.reference(f'users/{user_id}/transaction_reports/{report_id}')
            if not ref.get():
                return Response({'error': 'Report not found', 'status': 'error'},
                                status=status.HTTP_404_NOT_FOUND)

            ref.delete()
            return Response({'message': 'Transaction report deleted successfully', 'status': 'success'},
                            status=status.HTTP_200_OK)

        except Exception as e:
            return Response({'error': str(e), 'status': 'error'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class FinancialReportView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, user_id):
        """
        Get all financial reports for a user
        """
        try:
            reports_ref = db.reference(f'users/{user_id}/financial_reports')
            reports = reports_ref.get()

            if not reports:
                return Response({
                    'message': 'No financial reports found',
                    'data': [],
                    'status': 'success'
                }, status=status.HTTP_200_OK)

            reports_list = []
            for report_id, report in reports.items():
                reports_list.append({
                    'id': report_id,
                    **report
                })

            return Response({
                'data': reports_list,
                'message': 'Financial reports retrieved successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request):
        """
        Create a new financial report
        """
        try:
            data = request.data
            required_fields = ['user_id', 'title', 'date', 'amount', 'details']
            missing_fields = [field for field in required_fields if field not in data]

            if missing_fields:
                return Response({
                    'error': f'Missing required fields: {', '.join(missing_fields)}',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            valid_titles = ['BALANCE_SHEET', 'INCOME_STATEMENT', 'CASH_FLOW']
            if data.get('title') not in valid_titles:
                return Response({
                    'error': f'Invalid title. Must be one of: {", ".join(valid_titles)}',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            report_data = {
                'title': data.get('title'),
                'date': data.get('date'),
                'amount': data.get('amount'),
                'type': 'MONTHLY',
                'status': 'COMPLETED',
                'details': data.get('details'),
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }

            reports_ref = db.reference(f'users/{data.get("user_id")}/financial_reports')
            new_report = reports_ref.push(report_data)

            return Response({
                'data': {
                    'id': new_report.key,
                    **report_data
                },
                'message': 'Financial report created successfully',
                'status': 'success'
            }, status=status.HTTP_201_CREATED)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class FinancialReportDetailView(APIView):
    permission_classes = [AllowAny]

    def put(self, request, report_id):
        """
        Update a financial report
        """
        try:
            data = request.data
            user_id = data.get('user_id')

            if not user_id:
                return Response({
                    'error': 'User ID is required',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            report_ref = db.reference(f'users/{user_id}/financial_reports/{report_id}')
            existing_report = report_ref.get()

            if not existing_report:
                return Response({
                    'error': 'Report not found',
                    'status': 'error'
                }, status=status.HTTP_404_NOT_FOUND)

            update_data = {
                'title': data.get('title', existing_report.get('title')),
                'date': data.get('date', existing_report.get('date')),
                'amount': data.get('amount', existing_report.get('amount')),
                'details': data.get('details', existing_report.get('details')),
                'updated_at': datetime.now().isoformat()
            }

            report_ref.update(update_data)

            return Response({
                'data': {
                    'id': report_id,
                    **update_data
                },
                'message': 'Financial report updated successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def delete(self, request, report_id):
        """
        Delete a financial report
        """
        try:
            user_id = request.query_params.get('user_id')

            if not user_id:
                return Response({
                    'error': 'User ID is required',
                    'status': 'error'
                }, status=status.HTTP_400_BAD_REQUEST)

            report_ref = db.reference(f'users/{user_id}/financial_reports/{report_id}')
            report_ref.delete()

            return Response({
                'message': 'Financial report deleted successfully',
                'status': 'success'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({
                'error': str(e),
                'status': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
